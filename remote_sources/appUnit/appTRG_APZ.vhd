--------------------------------------------------------------
--------------------------------------------------------------
--                                                          --
-- This VHDL file has been generated by the verilog2vhdl    --
-- tool.                                                    --
-- Contact help@edautils.com  for support/info.--
--                                                          --
--                                                          --
--------------------------------------------------------------
--------------------------------------------------------------
--
--
-- Assumptions: 
--         (1) All the parameters are of type INTEGER, and hence the translated generics are of this type
--
--
-- Generated by : smartoiu on 04/04/12 22:41
--
--


library ieee;
library work;
use ieee.std_logic_1164.all;
use ieee.std_logic_misc.all;
use ieee.numeric_std.all;
use work.vhdl_functions_sc.all;

Library UNISIM;
use UNISIM.vcomponents.all;

entity appTRG_APZ_vhd is 
     port (
        rstn :  in std_logic;
        clk :  in std_logic;
        api_trigger_inhibit, api_random_trigger, forceBclkRst :  in std_logic;
	 -- app sc registers
        regs :  in std_logic_vector( 1023  downto 0  );
	 -- trigger from system
        trgin :  in std_logic;
	 -- trigger pulse to front-end
        trgout :  out std_logic;
	 -- trigger to backend-end
        ro_trigger :  out std_logic;
	 -- clk-trigger bundle
        bclkout :  out std_logic;
	 -- clk-trigger bundle (LVDS)
        bclk_p :  out std_logic;
        bclk_n :  out std_logic
    );
end entity; 


architecture rtl of appTRG_APZ_vhd is 
    signal cfg_bclk_mode : std_logic_vector( 7  downto 0  );
    signal cfg_bclk_mode_i : std_logic_vector( 7  downto 0  );
    signal cfg_bclk_trgburst : std_logic_vector( 7  downto 0  );
    signal cfg_bclk_freq : std_logic_vector( 15  downto 0  );
    signal cfg_bclk_trgdelay : std_logic_vector( 15  downto 0  );
    signal cfg_bclk_tpdelay : std_logic_vector( 15  downto 0  );
    signal cfg_bclk_rosync : std_logic_vector( 15  downto 0  );
    signal trgin_i : std_logic;
    signal trgcounter : std_logic_vector( 15  downto 0  );
    signal ro_trigger_i, trgout_i, bclkout_i : std_logic;
	COMPONENT bclk_ctrl
	PORT(
		clk : IN std_logic;
		clk2x : IN std_logic;
		rstn : IN std_logic;
		trgin : IN std_logic;
		forceRst : IN std_logic;
		reg0 : IN std_logic_vector(7 downto 0);
		reg1d : IN std_logic_vector(15 downto 0);
		reg2d : IN std_logic_vector(15 downto 0);
		reg3d : IN std_logic_vector(15 downto 0);
		reg4 : IN std_logic_vector(7 downto 0);          
		bclkout : OUT std_logic;
		trgout : OUT std_logic;
		syncPulse : OUT std_logic;
		syncPulse0 : OUT std_logic;
		trgcounter : OUT std_logic_vector(15 downto 0)
		);
	END COMPONENT;
    begin 
        cfg_bclk_mode 		<= ireg8( 0 , regs );
        cfg_bclk_trgburst 	<= ireg8( 1 , regs );
        cfg_bclk_freq 		<= ireg16( 2 , regs );
        cfg_bclk_trgdelay 	<= ireg16( 3 , regs );
        cfg_bclk_tpdelay 	<= ireg16( 4 , regs );
        cfg_bclk_rosync 	<= ireg16( 5 , regs );
		  
        cfg_bclk_mode_i <= X"00" when api_random_trigger = '1' else cfg_bclk_mode ;

        ro_trigger_i <= '1' when ( trgcounter = cfg_bclk_rosync ) else '0' ;
        ro_trigger <= ro_trigger_i;
		  
        trgin_i <= ( trgin and (  not api_trigger_inhibit )  ) ;

        bclk_ctrl_inst : bclk_ctrl
            port map (
                bclkout => bclkout_i,
                clk => clk,
                clk2x => clk,
                forceRst => forceBclkRst,
                reg0 => cfg_bclk_mode_i,
                reg1d => cfg_bclk_freq,
                reg2d => cfg_bclk_trgdelay,
                reg3d => cfg_bclk_tpdelay,
                reg4 => cfg_bclk_trgburst,
                rstn => rstn,
                syncPulse =>  open ,
                syncPulse0 =>  open ,
                trgcounter => trgcounter,
                trgin => trgin_i,
                trgout => trgout_i
                );
        OBUFDS_bclock : OBUFDS
            port map (
                I => bclkout_i,
                O => bclk_p,
                OB => bclk_n
                );
			bclkout <= bclkout_i;
        trgout <= trgout_i;
    end; 


